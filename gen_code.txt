def maxTargetsToDestroy(H, W, M, targets):
    # Create a 2D boolean matrix to keep track of visited cells
    grid = [[False] * W for _ in range(H)]
    
    # Sort targets by their positions
    sorted_targets = sorted(targets, key=lambda x: (x[0], x[1]))
    
    # Place the bomb starting from the top left corner of the grid
    num_destroyed = 0
    for _, target in enumerate(sorted_targets):
        if not grid[target[0]][target[1]]:
            grid[target[0]][target[1]] = True
            
            # Destroy all targets in the same row or column as the bomb
            for i in range(target[0], target[0]+2):
                if i >= 0 and i < H:
                    for j in range(target[1], target[1]+2):
                        if j >= 0 and j < W:
                            if not grid[i][j]:
                                continue
                            elif grid[i][j] == target:
                                num_destroyed += 1
                                break
                            else:
                                break
                    
            for i in range(target[1], target[1]+2):
                if i >= 0 and i < W:
                    for j in range(target[0], target[0]+2):
                        if j >= 0 and j < H:
                            if not grid[j][i]:
                                continue
                            elif grid[j][i] == target:
                                num_destroyed += 1
                                break
                            else:
                                break
    
    return num_destroyed

# Read input
H, W, M = map(int, input().split())
targets = []
for _ in range(M):
    h, w = map(int, input().split())
    targets.append((h, w))
print(maxTargetsToDestroy(H, W, M, targets))